import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServletServerHttpRequest;
import org.springframework.http.server.ServletServerHttpResponse;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@ControllerAdvice
public class SensitiveDataMaskingAdvice implements ResponseBodyAdvice<Object> {

    private final ObjectMapper objectMapper;
    private final SensitiveDataService sensitiveDataService;

    public SensitiveDataMaskingAdvice(ObjectMapper objectMapper, SensitiveDataService sensitiveDataService) {
        this.objectMapper = objectMapper;
        this.sensitiveDataService = sensitiveDataService;
    }

    @Override
    public boolean supports(Class<? extends HttpMessageConverter<?>> converterType, Class<?> clazz) {
        return true; // Apply globally to all responses
    }

    @Override
    public Object beforeBodyWrite(Object body, Class<? extends HttpMessageConverter<?>> selectedConverterType,
                                   Class<?> selectedType, org.springframework.http.MediaType contentType,
                                   HttpInputMessage inputMessage, HttpOutputMessage outputMessage) {
        if (!(inputMessage instanceof ServletServerHttpRequest) || !(outputMessage instanceof ServletServerHttpResponse)) {
            return body;
        }

        HttpServletRequest request = ((ServletServerHttpRequest) inputMessage).getServletRequest();
        String endpoint = request.getRequestURI();
        String user = request.getRemoteUser(); // Modify based on your authentication mechanism

        if (shouldMask(endpoint, user)) {
            return maskSensitiveFields(body);
        }

        return body;
    }

    private boolean shouldMask(String endpoint, String user) {
        // Fetch sensitive endpoints and users from the database
        List<String> sensitiveEndpoints = sensitiveDataService.getSensitiveEndpointsForUser(user);
        return sensitiveEndpoints.contains(endpoint);
    }

    private Object maskSensitiveFields(Object body) {
        try {
            String json = objectMapper.writeValueAsString(body);
            Map<String, Object> responseMap = objectMapper.readValue(json, Map.class);
            List<String> sensitiveFields = sensitiveDataService.getSensitiveFields();
            maskNestedSensitiveFields(responseMap, sensitiveFields);
            return responseMap;
        } catch (Exception e) {
            // Log the exception and return the original body if an error occurs
            e.printStackTrace();
            return body;
        }
    }

    private void maskNestedSensitiveFields(Map<String, Object> map, List<String> sensitiveFields) {
        for (Map.Entry<String, Object> entry : map.entrySet()) {
            if (entry.getValue() instanceof Map) {
                // Recursively mask nested maps
                maskNestedSensitiveFields((Map<String, Object>) entry.getValue(), sensitiveFields);
            } else if (entry.getValue() instanceof String && sensitiveFields.contains(entry.getKey())) {
                // Mask sensitive fields based on database-configured fields
                entry.setValue("****");
            }
        }
    }
}

@Service
class SensitiveDataService {

    // Mock database methods; replace with actual database interaction
    public List<String> getSensitiveEndpointsForUser(String user) {
        // Fetch from database based on user
        return List.of("/api/private", "/api/secure");
    }

    public List<String> getSensitiveFields() {
        // Fetch from database
        return List.of("creditCardNumber", "ssn", "password");
    }
}
